"use client";
import {
  Button,
  Input as ChakraInput,
  useDisclosure,
  Box,
} from "@chakra-ui/react";
import React, { useId, forwardRef } from "react";
import { Field, InputGroup, InputProps } from ".";
import { createTexts, useTranslation } from "..";

export type PasswordInputProps = Omit<InputProps, "isDisabled"> & {
  isDisabled?: boolean;
};
export const PasswordInput = forwardRef<HTMLInputElement, PasswordInputProps>(
  (props, ref) => {
    const { open: isShowingPassword, onToggle } = useDisclosure();
    const { t } = useTranslation();
    const autoGeneratedId = `password-input-${useId()}`;
    const inputId = props.id ?? props?.id ?? autoGeneratedId;
    return (
      <Box position="relative">
        <Field label={props.label}>
          <InputGroup
            flex={1}
            startElement={props.leftIcon && props.leftIcon}
            endElement={
              <Button
                variant="ghost"
                type="button"
                fontWeight="normal"
                size="sm"
                onClick={onToggle}
                borderRadius="sm"
                marginRight={1}
                disabled={props.disabled || props.isDisabled}
              >
                {isShowingPassword
                  ? t(texts.hidePassword)
                  : t(texts.showPassword)}
              </Button>
            }
          >
            <ChakraInput
              {...props}
              id={inputId}
              placeholder=" " // This is needed to make the label work as expected
              type={isShowingPassword ? "text" : "password"}
              paddingRight={10}
              paddingLeft={props.leftIcon ? 7 : undefined}
              ref={ref}
              data-attachable
            />
          </InputGroup>
        </Field>
      </Box>
    );
  },
);

const texts = createTexts({
  showPassword: {
    nb: "Vis",
    nn: "Vis",
    en: "Show",
    sv: "Visa",
  },
  hidePassword: {
    nb: "Skjul",
    nn: "Skjul",
    en: "Hide",
    sv: "DÃ¶lj",
  },
});
