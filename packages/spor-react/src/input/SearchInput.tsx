import {
  Input as ChakraInput,
  InputProps as ChakraInputProps,
  IconButton,
  LayoutProps,
  forwardRef,
  useFormControlContext,
} from "@chakra-ui/react";
import {
  CloseOutline24Icon,
  SearchOutline24Icon,
} from "@vygruppen/spor-icon-react";
import React, { useId } from "react";
import { FormLabel, InputGroup, InputLeftElement, InputRightElement } from ".";
import { createTexts, useTranslation } from "..";

export type SearchInputProps = Exclude<
  ChakraInputProps,
  "variant" | "size" | "leftIcon" | "rightIcon"
> & {
  /** Optional label. Defaults to the localized version of "search" */
  label?: string | React.ReactNode;
  /** Callback for when the clear button is clicked */
  onReset?: () => void;
};
/** Simple search input component.
 *
 * Includes a search icon, a localized label and a reset button.
 */
export const SearchInput = forwardRef<SearchInputProps, "input">(
  ({ label, onReset, ...props }, ref) => {
    const { t } = useTranslation();
    const showClearButton = onReset && Boolean(props.value);
    const formControlProps = useFormControlContext();
    const autoGeneratedId = useId();
    const inputId = props.id ?? formControlProps?.id ?? autoGeneratedId;

    const { outerProps, innerProps } = getOuterProps(props);

    return (
      <InputGroup position="relative" {...outerProps}>
        <InputLeftElement>
          <SearchOutline24Icon />
        </InputLeftElement>
        <ChakraInput
          paddingLeft={7}
          paddingRight={7}
          {...innerProps}
          id={inputId}
          type="search"
          placeholder=" "
          css={{
            "&::-webkit-search-cancel-button": {
              WebkitAppearance: "none",
            },
          }}
          ref={ref}
          data-attachable
        />
        <FormLabel
          htmlFor={inputId}
          sx={{
            position: "absolute",
            left: "2.6rem",
            top: "26.9%",
            fontSize: "1.13rem",
            pointerEvents: "none",
            margin: 0,
            zIndex: 2,
            "input:focus + &, input[data-has-value] + &": {
              color: "var(--chakra-colors-gray-600)",
            },
            "input[data-has-value] + &": {
              transform: "translateY(-40%) scale(0.9)",
            },
          }}
        >
          {label ?? t(texts.label)}
        </FormLabel>
        {showClearButton && (
          <InputRightElement width="fit-content">
            <IconButton
              variant="ghost"
              type="button"
              size="sm"
              marginRight={1}
              aria-label={t(texts.reset)}
              icon={<CloseOutline24Icon />}
              onClick={onReset}
            />
          </InputRightElement>
        )}
      </InputGroup>
    );
  },
);

const getOuterProps = (props: Record<string, any>) => {
  const layoutKeys = new Set(["w, width, maxW, minW, maxWidth, minWidth"]); // add more keys here if neccessary
  const outerProps: LayoutProps = {};
  const innerProps: Record<string, any> = {};

  for (const key in props) {
    if (layoutKeys.has(key)) {
      (outerProps as any)[key] = props[key];
    } else {
      (innerProps as any)[key] = props[key];
    }
  }

  return { outerProps, innerProps };
};

const texts = createTexts({
  label: {
    nb: "Søk",
    nn: "Søk",
    sv: "Sök",
    en: "Search",
  },
  reset: {
    nb: "Tøm søkefeltet",
    nn: "Tøm søkefelt",
    sv: "Rensa sökrutan",
    en: "Reset search field",
  },
});
