version: 2.1
orbs:
  deployment: vydev/deployment@0.7.0
  terraform: circleci/terraform@3.2.1
  aws-ecr: circleci/aws-ecr@9.3.1
  aws-cli: circleci/aws-cli@5.0.0

parameters:
  GHA_Action:
    type: string
    default: ""
  ecr_repo_name:
    type: string
    default: "spor"
  ecr_endpoint:
    type: string
    default: "637423315721.dkr.ecr.eu-west-1.amazonaws.com"
  pipeline_name:
    type: string
    default: "spor-delivery-pipeline"
  terraform_version:
    type: string
    default: "1.8.4"
  terraform_artifact_name:
    type: string
    default: "spor-tf"

jobs:
  build-and-push-docker:
    parameters:
      tags:
        type: string
        default: "${CIRCLE_SHA1:0:7}"
      ecr_repo_name:
        type: string
        description: "The name of the ECR repository to push Docker images to"
      ecr_endpoint:
        type: string
        description: "The ECR endpoint to use (note: the CircleCI project environment variable ECR_ENDPOINT takes higher precedence than this parameter)."
        default: ""
    docker:
      - image: "vydev/circleci-ecr:latest"
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: /tmp/workspace
    steps:
      - setup_remote_docker:
          version: docker24
      - checkout:
          path: ./
      - run:
          name: "Build Docker image"
          command: |
            ECR_ENDPOINT="${ECR_ENDPOINT:-<< parameters.ecr_endpoint >>}"
            if [ -z "$ECR_ENDPOINT" ]; then
              echo "ECR endpoint has not been set"
              exit 1
            fi
            aws ecr get-login-password --region eu-west-1 \
              | docker login --username AWS --password-stdin "$ECR_ENDPOINT"
            docker build -t ${ECR_ENDPOINT}/<< parameters.ecr_repo_name >> -f apps/designmanual-frontend/Dockerfile .
            docker tag ${ECR_ENDPOINT}/<< parameters.ecr_repo_name >> "${ECR_ENDPOINT}/<< parameters.ecr_repo_name >>:latest"
            docker push "${ECR_ENDPOINT}/<< parameters.ecr_repo_name >>:latest"
            docker tag ${ECR_ENDPOINT}/<< parameters.ecr_repo_name >> "${ECR_ENDPOINT}/<< parameters.ecr_repo_name >>:<< pipeline.git.branch >>-branch"
            docker push "${ECR_ENDPOINT}/<< parameters.ecr_repo_name >>:<< pipeline.git.branch >>-branch"
            docker tag ${ECR_ENDPOINT}/<< parameters.ecr_repo_name >> "${ECR_ENDPOINT}/<< parameters.ecr_repo_name >>:${CIRCLE_SHA1:0:7}"
            docker push "${ECR_ENDPOINT}/<< parameters.ecr_repo_name >>:${CIRCLE_SHA1:0:7}"

  upload-terraform-artifacts:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - deployment/zip-and-upload-artifact:
          application-name: << pipeline.parameters.terraform_artifact_name >>
          source-directory: ./apps/designmanual-frontend/
          source: terraform

workflows:
  version: 2
  build:
    jobs:
      - terraform/validate:
          tag: << pipeline.parameters.terraform_version >>
          checkout: true
          backend: false
          matrix:
            parameters:
              path:
                - apps/designmanual-frontend/terraform/service
                - apps/designmanual-frontend/terraform/prod
                - apps/designmanual-frontend/terraform/test

      - build-and-push-docker:
          context: digital-common-services
          ecr_repo_name: << pipeline.parameters.ecr_repo_name >>
          ecr_endpoint: << pipeline.parameters.ecr_endpoint >>
          requires:
            - terraform/validate
          filters:
            branches:
              only:
                - main

      - upload-terraform-artifacts:
          context:
            - digital-common-services
          requires:
            - build-and-push-docker
          filters:
            branches:
              only: main

      - deployment/trigger-deployment:
          context:
            - digital-common-services
          requires:
            - upload-terraform-artifacts
            - build-and-push-docker
          filters:
            branches:
              only: main
